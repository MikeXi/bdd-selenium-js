#!/usr/bin/env groovy

/////////////////////////////////////////////////////////////////////////////////////////////
// Gitlab Info
def gitCNMTest = 'https://git.epam.com/mike_xi/bdd-selenium-js.git'
def branch = "*/master"
def gitCredentialsId = '6e186529-3131-48bb-87e1-d27a214e5460'

def targetEnvironment = 'QA'

// Define basic folders
def dirMainTest = '.'
def dirZip = "${dirMainTest}/reports"

currentStatus = 'START'

///////////////////////////////////////////////////////////////////////////////////////////////
/**
 * use to checkout code from gitlab
 * @param gitUrl
 * @param branch
 * @param gitCredentialsId
 * @return
 */
/**
 $class             : 'SubmoduleOption',
 disableSubmodules  : false,
 parentCredentials  : true,
 recursiveSubmodules: true,
 reference          : '',
 trackingSubmodules : false
 */
def fetch(gitUrl, branch, gitCredentialsId, targetDir) {
    echo "Begin to checkout code from ${branch}..."
    try {
        checkout(
                [
                        $class                           : 'GitSCM',
                        branches                         : [[name: branch]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions                       : [[
                                                                    $class           : 'RelativeTargetDirectory',
                                                                    relativeTargetDir: targetDir
                                                            ]],
                        gitTool                          : 'Default',
                        submoduleCfg                     : [],
                        userRemoteConfigs                : [[
                                                                    credentialsId: gitCredentialsId,
                                                                    url          : gitUrl
                                                            ]]
                ]
        )
        currentStatus = 'CHECKOUT_SUCCESS'
    } catch (err) {
        echo 'Checkout code failed from gitlab. See the error for details..'
        currentStatus = 'SKIP'
        throw err
    }
    echo "End checkout code: ${currentStatus}"
}
///////////////////////////////////////////////////////////////////////////////////////////
node {
    timestamps {
        def log;
        try {
            pipeline {
                parameters {
                    choice(name: 'Environment', choices: ['DEV', 'QA'], description: 'Please select the environment')
                }
                stage('Info') {
                    log = "[STAGE1]: Auto-Test jenkins pipeline starts..."
                    echo "\u2600 Runtime Environment: [${params.Environment}]"
                }
            }
            stage('Preparation') {
                echo "\u2600 Preparation"
                log = "[STAGE2]: Checkout code now..."
                def workspace = pwd()
                echo "\u2600 WORKSPACE: ${workspace}"
                fetch(gitCNMTest, branch, gitCredentialsId, dirMainTest)

				echo "\u2600 Install NodeJS dependencies"
				bat '@echo off for /f "delims=" %%i in (\'npm ls cross-env\') do if "%%i"=="`-- (empty)" (npm install --save-dev cross-env)'
				bat '@echo off for /f "delims=" %%i in (\'npm ls minimist\') do if "%%i"=="`-- (empty)" (npm install --save-dev minimist)'
				bat 'npm install --save-dev selenium-webdriver'
				//bat '@echo off for /f "delims=" %%i in (\'npm ls selenium-webdriver\') do if "%%i"=="`-- (empty)" (npm install --save-dev selenium-webdriver)'
				bat '@echo off for /f "delims=" %%i in (\'npm ls @cucumber/cucumber\') do if "%%i"=="`-- (empty)" (npm install --save-dev @cucumber/cucumber)'
				bat '@echo off for /f "delims=" %%i in (\'npm ls cucumber-html-reporter\') do if "%%i"=="`-- (empty)" (npm install --save-dev cucumber-html-reporter)'
				bat '@echo off for /f "delims=" %%i in (\'npm ls chromedriver\') do if "%%i"=="`-- (empty)" (npm install --save-dev chromedriver)'
				bat '@echo off for /f "delims=" %%i in (\'npm ls edgedriver\') do if "%%i"=="`-- (empty)" (npm install --save-dev edgedriver)'
				bat '@echo off for /f "delims=" %%i in (\'npm ls geckodriver\') do if "%%i"=="`-- (empty)" (npm install --save-dev geckodriver)'
				bat '@echo off for /f "delims=" %%i in (\'npm ls iedriver\') do if "%%i"=="`-- (empty)" (npm install --save-dev iedriver)'
				bat '@echo off for /f "delims=" %%i in (\'npm ls ms-chromium-edge-driver\') do if "%%i"=="`-- (empty)" (npm install --save-dev ms-chromium-edge-driver)'
				bat '@echo off for /f "delims=" %%i in (\'npm ls wdio-safaridriver-service\') do if "%%i"=="`-- (empty)" (npm install --save-dev wdio-safaridriver-service)'
				
            }

            stage('Execute') {
                log = "[STAGE3]: Execute automation test now..."
                echo "\u2600 Execute automation test now"
                bat "npm run dev:chrome -- -t smoke"
            }
            currentStatus = 'SUCCESS'
        } catch (exc) {
            currentStatus = 'FAILURE'
            echo 'ERROR: ' + exc
            log = log + '[' + exc.getMessage() + ']'
            throw exc
        }
        finally {
            stage('Report') {
                String resultFile = "TestReports.zip"
                // zip zipFile: 'TestReports.zip', archive: false, dir:'reports/'
                //bat "del TestReports.zip"
                archiveArtifacts artifacts: 'reports/', followSymlinks: true
            }
        }

    }
}